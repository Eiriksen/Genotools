sex[na_prop > sensitivity] = "?"
dataframe$sex = sex
return(dataframe)
}
#clean_sexSet = function(dataset, a, b)
#{
#  # clean the ID column down to just the number
#  dataset$id = str_extract(dataset$V1, a)
#  dataset$id = sub(b,"",dataset$id)
#  # clean the dataset for everything that doesn't have an ID number as specified above
#  dataset = dataset[which(!is.na(dataset$id)),]
#  # Lookup table for sex
#  dataset$sex = c("0"="Female", "1"="Male", "NA"=NA)[as.character(dataset$V2)]
#  # Return set with only ID and sex
#  dataset = data.frame(id = as.numeric(dataset$id), sex= dataset$sex)
#}
#clean_dirtyData = function(dirtyID, dirtyVar, expression, lookupTable, variName = "variable")
#{
#  # clean the ID column down to just the number
#  regExpr = paste("[0-9]*",expression,sep="")
#  cleanID = str_extract(dirtyID, regExpr)
#  cleanID = sub(expression,"",cleanID)
#
#  # clean the dataset for everything that doesn't have an ID number as specified above
#  dirtyVar= dirtyVar[!is.na(cleanID)]
#  cleanID = cleanID[!is.na(cleanID)]
#
#  # Lookup table for sex
#  cleanVar = lookupTable[as.character(dirtyVar)]
#
#  # Return set with only ID and sex (and name the variable according to the argument "variName")
#  dataset = as.tibble(data.frame(id = cleanID, variable= cleanVar))
#  dataset = dataset %>% rename_(.dots=setNames("variable", variName))
#  return(dataset)
#}
#clean_ID = function(dirtyID,expression)
#{
#  regExpr = paste("[0-9]*",expression,sep="")
#  cleanID = str_extract(dirtyID, regExpr)
#  cleanID = sub(expression,"",cleanID)
#  return(cleanID)
#}
#' clean_ID()
#'
#' For cleaning "dirty" ID's and removing rows that doesn't match our ID-pattern
#' @param dataset the dataset we're using. Each row has it's own ID
#' @param column the name of the column containing the ID's
#' @param identifier ID's need to be formated with a number and following expresio, e.g "34_individuals2019" where "_individuals2019" is the expression. Any entries not matching this format will be removed.
#' @param trailing_ident Wether the expression if before (F) or after (T)of the ID number
#' @param numLength if you want leading zeroes, use this parameter to specify the length of the number, e.g "8" for 00000342
#' @export prefix if you want a prefix in the new cleaned ID. Ex: "individuals2019_" will give you "individuals2019_0034"s
#'
clean_ID = function(dataset, column, identifier, trailing_ident=F, numLength=0, prefix="", numeric=F)
{
# Extract the dirty ID's
dirtyID = unlist(dataset[column])
# set the regular identifier to be used based on the "trailing" parameter
if (trailing_ident) regExpr = paste("[0-9]*",identifier,sep="")
else          regExpr = paste(identifier,"[0-9]*",sep="")
# Creat the clean ID using str_extract on the dirtyID together with the regular identifier
cleanID = dirtyID %>% str_extract(regExpr)
# Set the old column to be the new ID
dataset[column] = cleanID
# Rename the column to "ID", and remove NA values (thoes not fitting the format)
dataset = dataset %>% rename("ID"=column) %>% remoNA("ID")
# Remove the old identifier
dataset$ID = dataset$ID %>% sub(identifier,"", .)
# Add leading zeroes
if (numLength !=0) dataset$ID = dataset$ID %>% as.numeric() %>% sprintf( paste("%0",numLength,"d",sep=""), .)
# Make numeric (or not)
if (numeric) dataset$ID = as.numeric(dataset$ID)
# Add the new prefix
if (prefix!="") dataset$ID =dataset$ID %>% paste(prefix, ., sep="")
return(dataset)
}
numextract <- function(string){
require(stringr)
as.numeric(str_extract(string, "\\-*\\d+\\.*\\d*"))
}
# Removes NA rows (in a given column) from a dataset
remoNA = function(dataset,column)
{
return(dataset[which(!is.na(dataset[column])),])
}
clean_IDs = function(vector_dirty, identifier, numLength=0, keepIdentifier=F, trailing=F,  prefix="", suffix="")
{
# set the regular expression to be used based on the "trailing" parameter
if (trailing) regExpr = paste("[0-9]*",identifier,sep="")
else          regExpr = paste(identifier,"[0-9]*",sep="")
# Clean the ID's
vector_clean = vector_dirty %>% str_extract(regExpr)
# Remove the old identifier
if (!keepIdentifier) vector_clean = vector_clean %>% sub(identifier,"", .)
# Add leading zeroes
if (numLength !=0) vector_clean = vector_clean %>% as.numeric() %>% sprintf( paste("%0",numLength,"d",sep=""), .)
# Add the new prefix
vector_clean =vector_clean %>% paste(prefix, ., sep="")
# Add the new suffix
vector_clean =vector_clean %>% paste(., suffix, sep="")
return(vector_clean)
}
safeMerge = function(vector)
{
# Get the datatype of the vector
type = typeof(vector)
#1 remove NA values
vector = vector[!is.na(vector)]
#check if the remaning entries are equal
#if they are, return one of them
#if they're not, return NA
if (length(unique(vector)) == 1) return(unique(vector))
else return(convertType(NA,type))
}
convertType = function(var,type)
{ #https://stackoverflow.com/questions/47410679/change-type-of-object-based-on-typeof-another-object
unlist(lapply(var,paste0('as.',type)))
}
unSelect = function(df,...) return(df %>% select(-c(...)))
SNPPITfile = function(name,parents, offspring,parentSex=T,parentPopulation=T)
{
# ASSUMES the following names for columns:
# IDs:        "ID"         (string, no whitespace)
# Sex:        "sex"        (F/M/?)
# Population: "population" (string, no whitespace)
# And no other columns other than loci!
printLines = c()
loci = names(parents)
loci = loci [! loci %in% c("ID")]
if (parentPopulation)
{
loci = loci[! loci %in% c("population")]
}
if (parentSex)
{
loci = loci[! loci %in% c("sex")]
printLines = c(printLines, "POPCOLUMN_SEX")
}
printLines = c(paste("NUMLOCI", length(loci)),"MISSING_ALLELE *",printLines)
for( i in loci)
{
printLines = c(printLines, paste(i, "0.005"))
}
snppitFile = file(paste(name,".txt",sep=""), "w")
writeLines(printLines, snppitFile)
if (parentPopulation)
{
for (i in unique(parents$population))
{
writeLines(paste("POP",i),snppitFile)
write.table(parents[which(parents$population==i),] %>% select(-c("population")), snppitFile, sep="\t", quote=F, row.names = F, col.names=F)
}
}
else
{
writeLines("POP Parentpool_0",snppitFile)
write.table(parents, snppitFile, sep="\t", quote=F, row.names = F, col.names=F)
}
writeLines("OFFSPRING Offspring_pool ?",snppitFile)
write.table(offspring, snppitFile, sep="\t", quote=F, row.names = F, col.names=F)
close(snppitFile)
}
findFamily = function(ID_mams, ID_paps)
{
family = unlist(data_families %>% filter(ID_ma == ID_mams & ID_pa == ID_paps) %>% select(ID_family))
if (family %>% length() == 0) return(NA) else return(family)
}
# rename genotype columns
renameGenotypes = function(dataframe, LUT, not_genotypes=c()) {
for (i in names(dataframe %>% select(-c(not_genotypes)))) {
dataframe <- dataframe %>% renameGenotype(i, LUT)
}
dataframe
}
renameGenotype = function(dataframe, column, LUT=c("1"="1 1","2"="1 2","3"="2 2"))
{
genotype = dataframe[column] %>% unlist()
col = LUT[genotype]
col[is.na(col)] = "* *"
dataframe[column] = col
return(dataframe)
}
get_advanced_genotypes <- function(offspring, families) {
# Function for this specific pipeline, gives the correct heterozygote phenotype
#apply following function to all offspring:
apply(offspring,1,FUN=function(x) {
vgll3geno = as.numeric(x[["c25_1441_SAC"]])
fam = as.numeric(x[["family"]])
pop = x[["population"]]
if(is.na(vgll3geno)) return("NA")
if (vgll3geno == 1) {
return("EE")
}
if (vgll3geno == 2) {
# find the genotype of the mother
if (is.na(fam)) return("EL/LE")
row_fam <- families %>% filter(ID_family == fam & Population==pop)
damVGLL3 = row_fam$Dam.VGLL3
if (damVGLL3 == "LL") return("LE")
else if (damVGLL3 == "EE") return("EL")
else return("EL/LE")
}
if (vgll3geno == 3) {
return("LL")
}
return("none of the above")
})
}
#' calc_genetic_similarity
#'
#' takes two vectors of SNPs,
#' Each element in the vector should be the genotypes of one SNP, written as bases, e.g "CT" "CC" "AT" etc. Order, e.g. "CT" or "TC" is not taken into account.
#' It's important that the order of SNPs in the two vectors are the same.
#' Returns an integer between 1 and 0 (0 = 0% match, 1=100% match)
#' @param SNPs1 the first vector of SNPs
#' @param SNPs2 the second vector of SNPs
#'
calc_genetic_similarity = function(sample1, sample2,naCutoff=15){
require(tidyverse)
require(stringr)
require(tidyverse)
#Error checking: similar length
# For easier processing using sapply
df = na.omit(data.frame(sample1,sample2))
#iterate over each element in the vector
#check how many alleles they have in common, (CT TC = 4, two matches,  CT CC = two matches, CC TT = nomatches), then store that number
if (nrow(df) < naCutoff) return(0)
matches = apply(df,1,FUN=function(x){
snp1 = x[["sample1"]]
snp2 = x[["sample2"]]
# Heart of this function
m=0
if( substr(snp1,1,1)==substr(snp2,1,1)) m=m+1
if( substr(snp1,2,2)==substr(snp2,2,2)) m=m+1
m
})
# Return the proportion of matches vs total potential matches
sum(matches)/(length(df$sample1)*2)
}
#' find closest match
#'
#' Using the find_genetic_similarity function, takes a table of genetic samples (rows: samples, columns: snp genotypes) and calculates
#' @param sample the sample to find closest match to
#' @param lookup a dataframe of samples with SNP data (Each row one sample, each column a snp loki). First row must be ID info.
#'
calculate_distance_to_sample = function(table, sample,notSNP){ #for one vs one
require(tidyverse)
SNPtable = table %>% select(-notSNP)
table$distance = apply(SNPtable,1,FUN=function(x){
SNPs = unlist(as.character(x))
calc_genetic_similarity(sample,SNPs)
})
return(table)
}
#a=calculate_distance_to_sample(data_genotypes_p1, data_genotypes_p2 %>% filter(ID=="Offsp6050") %>% select(-c("ID","sex")) %>% as.character(), notSNP=c("ID","sex"))
#plot(a$distance)
find_closest_match = function(sample,table,notSNP) { #for one vs many
require(tidyverse)
distTable = table %>% calculate_distance_to_sample(sample,notSNP)
highestDistance = max(distTable$distance)
if(highestDistance < 0.1) return(NA)
closestIndividual = distTable %>% filter(distance == highestDistance)
closestIndividual
}
find_genetic_matches = function(samples,lookup,notSNP){ # for many vs many
require(beepr)
require(tidyverse)
SNPsamples = samples %>% select(-notSNP)
matches = pbapply(SNPsamples,1,FUN=function(x){
closestMatch = find_closest_match(as.character(x), lookup, notSNP)
matchID = NA
matchSimilarity= NA
if(!is.na(closestMatch)) {
matchID = closestMatch$ID
matchSimilarity = closestMatch$distance
}
return(list(matchID=matchID,matchSimilarity=matchSimilarity))
})
beep(8)
matches = matches %>%
map(as.data.frame) %>%
bind_rows() %>%
select(matchID, matchSimilarity)
samples = cbind(samples,matches)
samples %>% select(c("ID","matchID","matchSimilarity"))
}
# Cecks if certain columns exist in a dataset and returns an error message if not
check_columns = function(dataset,columns,preMessage="Missing columns:"){
message = c(preMessage)
for (i in columns) {
if(!i %in% colnames(dataset))
{
message = c(message,paste("Column",i,"is missing."))
}
if(length(message)>1) error(message)
}
}
#' run_snppt
#'
#' Ver 0.1
#'
#' Function that simplifies using SNPPT.exe to calculate parentage based on SNP data
#' Requires that snppt.exe is installed in the working directory!
#'
#' Takes two datasets, one for offspring and one for parents. \cr
#' Both datasets must be formated as folows:
#' \itemize{
#' \item Individuals as rows
#' \item SNP data on columns, one column pr SNP
#' \item SNP genotype written numerically: 1=homozygous for allele a, 2=heterozygous, 3=homozygous for allele b
#' \item One column named "ID" that contains some ID for each individual,
#' \item Only for parents: One column named "population" that's either "M" or "F"
#' \item Only for parents: One column named "population" that gives that individual's population
#' }
#'
#' Important!: Any column that is not ID, sex (parents) or population (parents) will be interpreted as an SNP!!!
#'
#' @param data_offspring Dataset contaning offspring ID's and SNP genotypes (see above)
#' @param data_parents Dataset containing parent ID's, sex, population, and SNP genotypes (see above)
#' @param projectName Optional. A name that will be used for files created during the proces
#' @export
#' @examples run_snppt(offspring, parents, "Project_oct2019")
run_snppt <- function(data_offspring, data_parents, projectName="project1"){
# Check that the parent set has columns "ID", "Sex" and "population"
check_columns(data_parents,c("ID","sex","population"))
check_columns(data_offspring,c("ID"))
# Convert the genotype data in the dataset from normal numeric to snppt numeric type
data_parents = data_parents %>%
renameGenotypes(LUT=c("1"="1 1","2"="1 2","3"="2 2"), not_genotypes=c("ID","sex","population"))
data_offspring = data_offspring %>%
renameGenotypes(LUT=c("1"="1 1","2"="1 2","3"="2 2"), not_genotypes=c("ID"))
# remove any column that is not equal between parents and offspring dataset (except population and sex)
data_parents   <- data_parents %>% select( "ID","population","sex", data_offspring %>% names() %>% one_of() )
data_offspring <- data_offspring %>% select( "ID", data_parents %>% names() %>% one_of() )
#Filename to use for snpptfile
snpptfile_name = paste("snpptfile -", projectName)
#Write SNPPIT file based on parent and offspring data
message("Attempting to write SNPPT settings file...")
SNPPITfile(snpptfile_name,data_parents, data_offspring)
message("SNPPT settings file written!")
# Run snppit
message("Starting SNPPT analysis...")
location = paste("'",getwd(),"'",sep="") %>% str_replace_all("/","\\\\")
system2("powershell", args=c("Set-location",location))
system2("powershell", args=c(paste("./snppit -f '",snpptfile_name,".txt' --max-par-miss 100",sep="")))
# Obtain snppit results and clean them
message("Trying to obtain SNPPT results...")
data_snppit = read.table("snppit_output_ParentageAssignments.txt", head=T, comment.char = "") %>%
rename(ID_offspring=Kid, ID_pa=Pa, ID_ma=Ma, population=PopName)
data_snppit$ID_ma <- as.numeric(data_snppit$ID_ma)
data_snppit$ID_pa <- as.numeric(data_snppit$ID_pa)
# Return results
message("results ready!")
return(data_snppit)
}
run_snppt(data_offspring %>% slice(1:100), data_parents, "test_1")
data_snppit = read.table("snppit_output_ParentageAssignments.txt", head=T, comment.char = "")
View(data_snppit)
data_snppit = read.table("snppit_output_ParentageAssignments.txt", head=T, comment.char = "") %>%
rename(ID_offspring=Kid, ID_pa=Pa, ID_ma=Ma, population=PopName)
View(data_snppit)
#' \item Only for parents: One column named "population" that gives that individual's population
#' }
#'
#' Important!: Any column that is not ID, sex (parents) or population (parents) will be interpreted as an SNP!!!
#'
#' @param data_offspring Dataset contaning offspring ID's and SNP genotypes (see above)
#' @param data_parents Dataset containing parent ID's, sex, population, and SNP genotypes (see above)
#' @param projectName Optional. A name that will be used for files created during the proces
#' @export
#' @examples run_snppt(offspring, parents, "Project_oct2019")
run_snppt <- function(data_offspring, data_parents, projectName="project1"){
# Check that the parent set has columns "ID", "Sex" and "population"
check_columns(data_parents,c("ID","sex","population"))
check_columns(data_offspring,c("ID"))
# Convert the genotype data in the dataset from normal numeric to snppt numeric type
data_parents = data_parents %>%
renameGenotypes(LUT=c("1"="1 1","2"="1 2","3"="2 2"), not_genotypes=c("ID","sex","population"))
data_offspring = data_offspring %>%
renameGenotypes(LUT=c("1"="1 1","2"="1 2","3"="2 2"), not_genotypes=c("ID"))
# remove any column that is not equal between parents and offspring dataset (except population and sex)
data_parents   <- data_parents %>% select( "ID","population","sex", data_offspring %>% names() %>% one_of() )
data_offspring <- data_offspring %>% select( "ID", data_parents %>% names() %>% one_of() )
#Filename to use for snpptfile
snpptfile_name = paste("snpptfile -", projectName)
#Write SNPPIT file based on parent and offspring data
message("Attempting to write SNPPT settings file...")
SNPPITfile(snpptfile_name,data_parents, data_offspring)
message("SNPPT settings file written!")
# Run snppit
message("Starting SNPPT analysis...")
location = paste("'",getwd(),"'",sep="") %>% str_replace_all("/","\\\\")
system2("powershell", args=c("Set-location",location))
system2("powershell", args=c(paste("./snppit -f '",snpptfile_name,".txt' --max-par-miss 100",sep="")))
# Obtain snppit results and clean them
message("Trying to obtain SNPPT results...")
data_snppit = read.table("snppit_output_ParentageAssignments.txt", head=T, comment.char = "") %>%
rename(ID_offspring=Kid, ID_pa=Pa, ID_ma=Ma, population=PopName)
# Return results
message("results ready!")
return(data_snppit)
}
a=run_snppt(data_offspring %>% slice(1:100), data_parents, "test_1")
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("C:/Users/asheimer/Jottacloud/git")
#create("EirikFunctions")
setwd("./Genotools")
setwd("C:/Users/asheimer/Jottacloud/git")
#create("EirikFunctions")
setwd("./Genotools")
document()
setwd("..")
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("C:/Users/asheimer/Jottacloud/git")
#create("EirikFunctions")
setwd("./Genotools")
document()
setwd("..")
install.packages("devtools")
install.packages("devtools")
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("C:/Users/asheimer/Jottacloud/git")
#create("EirikFunctions")
setwd("./Genotools")
document()
setwd("..")
setwd("C:/Users/asheimer/Jottacloud/git")
#create("EirikFunctions")
setwd("./Genotools")
document()
setwd("C:/Users/asheimer/Jottacloud/git")
#create("EirikFunctions")
setwd("./EirikFunctions")
document()
setwd("..")
create("Genotools")
setwd("C:/Users/asheimer/Jottacloud/git")
#create("Genotools")
setwd("./Genotools")
document()
setwd("C:/Users/asheimer/Jottacloud/git")
#create("Genotools")
setwd("./Genotools")
document()
setwd("..")
library(Genotools)
?run_snppt
?
install_github("Genotools","eiriksen")
?
install_github("Genotools","eiriksen")
install_github("Genotools","eiriksen")
install_github("Genotools","eiriksen")
setwd("C:/Users/asheimer/Jottacloud/git")
#create("Genotools")
setwd("./Genotools")
document()
setwd("..")
setwd("C:/Users/asheimer/Jottacloud/git")
#create("Genotools")
setwd("./Genotools")
document()
setwd("..")
install_github("Genotools","eiriksen")
install_github("Genotools","eiriksen")
install_github("EirikFunctions","eiriksen")
install_github("eiriksen/Genotools")
setwd("C:/Users/asheimer/Jottacloud/git")
#create("Genotools")
setwd("./Genotools")
document()
setwd("..")
install_github("eiriksen/Genotools")
setwd("C:/Users/asheimer/Jottacloud/PhD project/collected data and analysis/data - genotypes parents")
data_parents <- read.table("data - genotypes - numeric 123 - parents - clean.csv", sep=",", head=T) %>%
renameGenotypes(LUT=c("1"="1 1","2"="1 2","3"="2 2"), not_genotypes=c("ID","sex"))
library(tidyverse)
data_parents <- read.table("data - genotypes - numeric 123 - parents - clean.csv", sep=",", head=T) %>%
renameGenotypes(LUT=c("1"="1 1","2"="1 2","3"="2 2"), not_genotypes=c("ID","sex"))
restart()
data_parents <- read.table("data - genotypes - numeric 123 - parents - clean.csv", sep=",", head=T) %>%
renameGenotypes(LUT=c("1"="1 1","2"="1 2","3"="2 2"), not_genotypes=c("ID","sex"))
library(tidyverse)
data_parents <- read.table("data - genotypes - numeric 123 - parents - clean.csv", sep=",", head=T) %>%
renameGenotypes(LUT=c("1"="1 1","2"="1 2","3"="2 2"), not_genotypes=c("ID","sex"))
library(Genotools)
data_parents <- read.table("data - genotypes - numeric 123 - parents - clean.csv", sep=",", head=T) %>%
renameGenotypes(LUT=c("1"="1 1","2"="1 2","3"="2 2"), not_genotypes=c("ID","sex"))
setwd("C:/Users/asheimer/Jottacloud/PhD project/collected data and analysis/data - genotypes fin clips")
data_offspring <- read.table("data - genotypes - numeric - offspring.csv", sep=",", head=T) %>%
select(-c("sex")) %>%
renameGenotypes(LUT=c("1"="1 1","2"="1 2","3"="2 2"), not_genotypes=c("ID"))
#Set working directory to snppit program location
setwd("C:/Users/asheimer/Jottacloud/PhD project/collected data and analysis/snppit")
run_snppt(data_offspring, data_parents)
# Set working directory to this file's own directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
?checking
library(checking)
